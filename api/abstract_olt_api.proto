syntax = "proto3";
package api;
import "google/api/annotations.proto";

message AddPhyChassisMessage{
   string CLLI =1;
   string VCoreIP =2;
   int32 VCorePort=3;
}
message AddAbstractChassisMessage{
   string CLLI =1;
   string VCoreIP =2;
   int32 VCorePort=3;
}
message Error {
   int32 ErrorNum = 1;
   string ErrorMessage=2;
   int32 Serverity=3;
}
message AddPhyChassisReturn{
   string DeviceID = 1;
   Error error = 2;
}
message AddAbstractChassisReturn{
   string DeviceID = 1;
   Error error = 2;
}
message AddOLTChassisMessage{
   string ChassisDeviceID=1;
   fixed32 SlotIP=2;
   fixed32 SlotPort=3;
   bool Activate = 4;
   enum OltType {
      openolt = 0;
      asfvolt16=1;
      adtran=2;
      tibits=3;
   }
   OltType oltType = 5;
}
message AddOLTChassisReturn {
   string DeviceID =1;
   string ChassisDeviceID =2;
   Error error = 3;
}
message ActivateSlotMessage{
   string SlotDeviceID = 1;
}
message ActivateSlotReturn{
   bool Success = 1;
   Error error = 2;
}
message AddOntMessage{
   string ChassisDeviceID=1;
   string SlotDeviceID=2;
   int32 PortNumber=3;
   int32 OntNumber=4;
}
message AddOntReturn{
   bool Success=1;
   Error error = 2;
}

service AddPhyChassis{
   rpc CreateChassis(AddPhyChassisMessage) returns (AddPhyChassisReturn) {
      option(google.api.http) = {
         post: "/1/CreatePhyChassis"
	 body:"*"
      };
   }
}
service AddAbstractChassis{
   rpc CreateChassis(AddAbstractChassisMessage) returns (AddAbstractChassisReturn) {
      option(google.api.http) = {
         post: "/1/CreateAbstractChassis"
	 body:"*"
      };
   }
}

service AddOLTChassis {
   rpc AddOLTChassis(AddOLTChassisMessage) returns (AddOLTChassisReturn) {
      option(google.api.http) = {
         post: "/1/AddOLTChassis"
	 body:"*"
      };
   }
}
service ActivateSlot{
   rpc EnableSlot(ActivateSlotMessage) returns (ActivateSlotReturn){
      option(google.api.http) = {
         post: "/1/EnableSlot"
	 body:"*"
      };
   }
}
service ActivateOnt {
   rpc ProvisionOnt(AddOntMessage) returns (AddOntReturn) {}
}

